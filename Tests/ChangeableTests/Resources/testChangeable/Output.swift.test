struct A {
let a: String
let b: Int
var hasInt: Bool {
b != nil
}

    public func withChanges(
      a: String? = nil,
      b: Int? = nil
    ) -> Self {
      Self (
        a: a ?? self.a,
        b: b ?? self.b
      )
    }
}
struct B: Applicable {
let a: String
let b: Int
var hasInt: Bool {
b != nil
}

    public func withChanges(
      a: String? = nil,
      b: Int? = nil
    ) -> Self {
      Self (
        a: a ?? self.a,
        b: b ?? self.b
      )
    }

    public func apply(action: SetValue<Self, some Any>) -> Self {
      let path = action.path
      let value = action.value

      return withChanges(
        a: path == \Self.a ? {
            value as! String
        }() : a,
        b: path == \Self.b ? {
            value as! Int
        }() : b
      )
    }
}
